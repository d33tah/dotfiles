#!/usr/bin/env pypy

"""
Takes a stream of IPs and draws an SVG map showing their distribution across
the world.

Usage:

iptocountry < iplist \
    | iptocountry \
    | count-lines \
    | mapips BlankMap-World6.svg > out.svg

You might want to add | tee lines-counted.txt before mapips so you can redraw
the map quickly with a modified version of the script.

AUTHOR: Jacek Wielemborek, licensed under WTFPL.
"""

import sys
import collections
import math
import re
from geoip import geolite2

COUNTRY_TITLE_REGEX = 'id="%s".*\n\s+(<title>.*</title>)'

if len(sys.argv) != 2:
    sys.exit("Usage: %s path-to-BlankMap-World6.svg" % sys.argv[0])

def humanize_number(n):
  return ''.join(reversed(re.sub('(...)', '\\1 ', ''.join(reversed(str(n))))))

counts = []
for line in sys.stdin:
  i = line.rstrip().split(':\t')
  counts += [[i[1].lower(), int(i[0])]]
counts_sorted = sorted(counts, key=lambda x: x[1])
max_count = float(counts_sorted[-1][1])

def safe_log(a, b):
    if float(a) == float(b):
        return 1.0
    return math.log(a, b)

map_str = open(sys.argv[1]).read()
style_append = ""
for x in counts_sorted:
  country = x[0].lower()
  color = int(safe_log(x[1], max_count) * 255)
  style_append += " .%s { fill: #%02x0000; }" % (country, color)
  title_found_list = re.findall(COUNTRY_TITLE_REGEX % country, map_str)
  if len(title_found_list) > 0:
    title_found = title_found_list[0]
    num = humanize_number(x[1])
    title_new = title_found.replace('</title>', ': %s</title>' % num)
    map_str = map_str.replace(title_found, title_new)
  else:
    sys.stderr.write("Couldn't update title for country %s.\n" % country)
map_str = map_str.replace('</style>', style_append + '</style>')
print(map_str)
