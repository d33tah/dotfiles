#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Prints information about a disk.
"""

import subprocess
import os
import sys
sys.path += ['/usr/lib64/python2.7/site-packages']
import parted
import humanize
import prettytable

def h(i):
    return humanize.naturalsize(i)

# http://stackoverflow.com/a/566752/1091116
def getTerminalSize():
    import os
    env = os.environ
    def ioctl_GWINSZ(fd):
        try:
            import fcntl, termios, struct, os
            cr = struct.unpack('hh', fcntl.ioctl(fd, termios.TIOCGWINSZ,
        '1234'))
        except:
            return
        return cr
    cr = ioctl_GWINSZ(0) or ioctl_GWINSZ(1) or ioctl_GWINSZ(2)
    if not cr:
        try:
            fd = os.open(os.ctermid(), os.O_RDONLY)
            cr = ioctl_GWINSZ(fd)
            os.close(fd)
        except:
            pass
    if not cr:
        cr = (env.get('LINES', 25), env.get('COLUMNS', 80))

        ### Use get(key[, default]) instead of a try/catch
        #try:
        #    cr = (env['LINES'], env['COLUMNS'])
        #except:
        #    cr = (25, 80)
    return int(cr[1]), int(cr[0])

(width, height) = getTerminalSize()

table = prettytable.PrettyTable(['Number', 'Start', 'End', 'Size', 'Description'])
devnull = open(os.devnull)
fname = sys.argv[1]
device = parted.device.Device(fname)
blksize = device.sectorSize
disk = parted.disk.Disk(device)
partitions = disk.getLogicalPartitions() + disk.getPrimaryPartitions()
partitions.sort(key=lambda p: p.number)
for p in partitions:
    p1 = subprocess.Popen(["dd", "skip=%d" % p.geometry.start,
                            "if=%s" % fname, "bs=%d" % blksize],
                          stdout=subprocess.PIPE, stderr=devnull)
    desc = subprocess.check_output(["file", "-s", "-", "-b"],
                                   stdin=p1.stdout).rstrip()
    number = p.number
    start = p.geometry.start * blksize
    end = p.geometry.end * blksize
    size = end - start
    table.add_row([str(number), h(start), h(end), h(size), str(desc)])
    #print("%s\t%s\t%s\t%s\t%s" % (number, h(start), h(end), h(size), desc))

print(table)
